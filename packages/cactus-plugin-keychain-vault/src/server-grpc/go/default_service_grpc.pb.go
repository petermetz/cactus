// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ctkeychainvaultsrvgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	models "models"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DefaultServiceClient is the client API for DefaultService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DefaultServiceClient interface {
	GetKeychainEntryV1(ctx context.Context, in *GetKeychainEntryV1Request, opts ...grpc.CallOption) (*models.GetKeychainEntryResponse, error)
	SetKeychainEntryV1(ctx context.Context, in *SetKeychainEntryV1Request, opts ...grpc.CallOption) (*models.SetKeychainEntryResponse, error)
}

type defaultServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDefaultServiceClient(cc grpc.ClientConnInterface) DefaultServiceClient {
	return &defaultServiceClient{cc}
}

func (c *defaultServiceClient) GetKeychainEntryV1(ctx context.Context, in *GetKeychainEntryV1Request, opts ...grpc.CallOption) (*models.GetKeychainEntryResponse, error) {
	out := new(models.GetKeychainEntryResponse)
	err := c.cc.Invoke(ctx, "/ctkeychainvaultsrvgrpc.DefaultService/GetKeychainEntryV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultServiceClient) SetKeychainEntryV1(ctx context.Context, in *SetKeychainEntryV1Request, opts ...grpc.CallOption) (*models.SetKeychainEntryResponse, error) {
	out := new(models.SetKeychainEntryResponse)
	err := c.cc.Invoke(ctx, "/ctkeychainvaultsrvgrpc.DefaultService/SetKeychainEntryV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DefaultServiceServer is the server API for DefaultService service.
// All implementations must embed UnimplementedDefaultServiceServer
// for forward compatibility
type DefaultServiceServer interface {
	GetKeychainEntryV1(context.Context, *GetKeychainEntryV1Request) (*models.GetKeychainEntryResponse, error)
	SetKeychainEntryV1(context.Context, *SetKeychainEntryV1Request) (*models.SetKeychainEntryResponse, error)
	mustEmbedUnimplementedDefaultServiceServer()
}

// UnimplementedDefaultServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDefaultServiceServer struct {
}

func (UnimplementedDefaultServiceServer) GetKeychainEntryV1(context.Context, *GetKeychainEntryV1Request) (*models.GetKeychainEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeychainEntryV1 not implemented")
}
func (UnimplementedDefaultServiceServer) SetKeychainEntryV1(context.Context, *SetKeychainEntryV1Request) (*models.SetKeychainEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetKeychainEntryV1 not implemented")
}
func (UnimplementedDefaultServiceServer) mustEmbedUnimplementedDefaultServiceServer() {}

// UnsafeDefaultServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DefaultServiceServer will
// result in compilation errors.
type UnsafeDefaultServiceServer interface {
	mustEmbedUnimplementedDefaultServiceServer()
}

func RegisterDefaultServiceServer(s grpc.ServiceRegistrar, srv DefaultServiceServer) {
	s.RegisterService(&DefaultService_ServiceDesc, srv)
}

func _DefaultService_GetKeychainEntryV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeychainEntryV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServiceServer).GetKeychainEntryV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctkeychainvaultsrvgrpc.DefaultService/GetKeychainEntryV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServiceServer).GetKeychainEntryV1(ctx, req.(*GetKeychainEntryV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultService_SetKeychainEntryV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetKeychainEntryV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServiceServer).SetKeychainEntryV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctkeychainvaultsrvgrpc.DefaultService/SetKeychainEntryV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServiceServer).SetKeychainEntryV1(ctx, req.(*SetKeychainEntryV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// DefaultService_ServiceDesc is the grpc.ServiceDesc for DefaultService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DefaultService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ctkeychainvaultsrvgrpc.DefaultService",
	HandlerType: (*DefaultServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKeychainEntryV1",
			Handler:    _DefaultService_GetKeychainEntryV1_Handler,
		},
		{
			MethodName: "SetKeychainEntryV1",
			Handler:    _DefaultService_SetKeychainEntryV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "default_service.proto",
}
